<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="1.0-triggers" author="settler" dbms="postgresql">

        <sql>
            DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_insert
                ON public.prv_object_hierarchy;
            DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_delete
                ON public.prv_object_hierarchy;
            DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_update
                ON public.prv_object_hierarchy;
            DROP TRIGGER IF EXISTS trg_prv_privilege_insert
                ON public.prv_privilege;
            DROP TRIGGER IF EXISTS trg_prv_privilege_delete
                ON public.prv_privilege;
            DROP TRIGGER IF EXISTS trg_prv_privilege_update
                ON public.prv_privilege;
            DROP TRIGGER IF EXISTS trg_prv_user_role_insert
                ON public.prv_user;
            DROP TRIGGER IF EXISTS trg_prv_user_role_delete
                ON public.prv_user;
            DROP TRIGGER IF EXISTS trg_prv_user_role_update
                ON public.prv_user;
        </sql>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_object_hierarchy_insert()
                RETURNS TRIGGER AS
            $trg_prv_object_hierarchy_insert$
            BEGIN
                EXECUTE public.proc_jtb_object_hierarchy_insert(NEW.prv_object_from, NEW.prv_object_to);
                RETURN NULL;
            END;
            $trg_prv_object_hierarchy_insert$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_object_hierarchy_insert
                AFTER INSERT
                ON public.prv_object_hierarchy
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_object_hierarchy_insert();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_object_hierarchy_delete()
                RETURNS TRIGGER AS
            $trg_prv_object_hierarchy_delete$
            BEGIN
                EXECUTE public.proc_jtb_object_hierarchy_delete(OLD.prv_object_from, OLD.prv_object_to);
                RETURN NULL;
            END;
            $trg_prv_object_hierarchy_delete$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_object_hierarchy_delete
                AFTER DELETE
                ON public.prv_object_hierarchy
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_object_hierarchy_delete();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_object_hierarchy_update()
                RETURNS TRIGGER AS
            $trg_prv_object_hierarchy_update$
            BEGIN
                EXECUTE public.proc_jtb_object_hierarchy_delete(OLD.prv_object_from, OLD.prv_object_to);
                EXECUTE public.proc_jtb_object_hierarchy_insert(NEW.prv_object_from, NEW.prv_object_to);
                RETURN NULL;
            END;
            $trg_prv_object_hierarchy_update$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_object_hierarchy_update
                AFTER UPDATE
                ON public.prv_object_hierarchy
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_object_hierarchy_update();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_privilege_insert()
                RETURNS TRIGGER AS
            $trg_prv_privilege_insert$
            BEGIN
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(NEW.prv_owner);
                RETURN NULL;
            END;
            $trg_prv_privilege_insert$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_privilege_insert
                AFTER INSERT
                ON public.prv_privilege
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_privilege_insert();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_privilege_delete()
                RETURNS TRIGGER AS
            $trg_prv_privilege_deletete$
            BEGIN
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(OLD.prv_owner);
                RETURN NULL;
            END;
            $trg_prv_privilege_deletete$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_privilege_delete
                AFTER DELETE
                ON public.prv_privilege
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_privilege_delete();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_privilege_update()
                RETURNS TRIGGER AS
            $trg_prv_privilege_update$
            BEGIN
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(OLD.prv_owner);
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(NEW.prv_owner);
                RETURN NULL;
            END;
            $trg_prv_privilege_update$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_privilege_update
                AFTER UPDATE
                ON public.prv_privilege
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_privilege_update();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_user_role_insert()
                RETURNS TRIGGER AS
            $trg_prv_user_role_insert$
            BEGIN
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(NEW.prv_user);
                RETURN NULL;
            END;
            $trg_prv_user_role_insert$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_user_role_insert
                AFTER INSERT
                ON public.prv_user_role
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_user_role_insert();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_user_role_delete()
                RETURNS TRIGGER AS
            $trg_prv_user_role_delete$
            BEGIN
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(OLD.prv_user);
                RETURN NULL;
            END;
            $trg_prv_user_role_delete$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_user_role_delete
                AFTER DELETE
                ON public.prv_user_role
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_user_role_delete();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION public.trg_prv_user_role_update()
                RETURNS TRIGGER AS
            $trg_prv_user_role_update$
            BEGIN
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(OLD.prv_user);
                EXECUTE public.proc_jtb_object_privilege_refresh_by_owner(NEW.prv_user);
                RETURN NULL;
            END;
            $trg_prv_user_role_update$ LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_user_role_update
                AFTER UPDATE
                ON public.prv_user_role
                FOR EACH ROW
            EXECUTE PROCEDURE public.trg_prv_user_role_update();
        </createProcedure>

        <rollback>
            <sql>
                DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_insert
                    ON public.prv_object_hierarchy;
                DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_delete
                    ON public.prv_object_hierarchy;
                DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_update
                    ON public.prv_object_hierarchy;
                DROP TRIGGER IF EXISTS trg_prv_privilege_insert
                    ON public.prv_privilege;
                DROP TRIGGER IF EXISTS trg_prv_privilege_delete
                    ON public.prv_privilege;
                DROP TRIGGER IF EXISTS trg_prv_privilege_update
                    ON public.prv_privilege;
                DROP TRIGGER IF EXISTS trg_prv_user_role_insert
                    ON public.prv_user;
                DROP TRIGGER IF EXISTS trg_prv_user_role_delete
                    ON public.prv_user;
                DROP TRIGGER IF EXISTS trg_prv_user_role_update
                    ON public.prv_user;
            </sql>
        </rollback>

    </changeSet>

    <changeSet id="1.0-triggers" author="settler" dbms="mysql">

        <sql>
            DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_insert;
            DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_delete;
            DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_update;
            DROP TRIGGER IF EXISTS trg_prv_privilege_insert;
            DROP TRIGGER IF EXISTS trg_prv_privilege_delete;
            DROP TRIGGER IF EXISTS trg_prv_privilege_update;
            DROP TRIGGER IF EXISTS trg_prv_user_role_insert;
            DROP TRIGGER IF EXISTS trg_prv_user_role_delete;
            DROP TRIGGER IF EXISTS trg_prv_user_role_update;
        </sql>

        <createProcedure>
            CREATE TRIGGER trg_prv_object_hierarchy_insert
                AFTER INSERT
                ON prv_object_hierarchy
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_hierarchy_insert(NEW.prv_object_from, NEW.prv_object_to);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_object_hierarchy_delete
                AFTER DELETE
                ON prv_object_hierarchy
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_hierarchy_delete(OLD.prv_object_from, OLD.prv_object_to);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_object_hierarchy_update
                AFTER UPDATE
                ON prv_object_hierarchy
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_hierarchy_delete(OLD.prv_object_from, OLD.prv_object_to);
                CALL proc_jtb_object_hierarchy_insert(NEW.prv_object_from, NEW.prv_object_to);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_privilege_insert
                AFTER INSERT
                ON prv_privilege
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_privilege_refresh_by_owner(NEW.prv_owner);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_privilege_delete
                AFTER DELETE
                ON prv_privilege
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_privilege_refresh_by_owner(OLD.prv_owner);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_privilege_update
                AFTER UPDATE
                ON prv_privilege
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_privilege_refresh_by_owner(OLD.prv_owner);
                CALL proc_jtb_object_privilege_refresh_by_owner(NEW.prv_owner);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_user_role_insert
                AFTER INSERT
                ON prv_user_role
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_privilege_refresh_by_owner(NEW.prv_user);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_user_role_delete
                AFTER DELETE
                ON prv_user_role
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_privilege_refresh_by_owner(OLD.prv_user);
            END;
        </createProcedure>

        <createProcedure>
            CREATE TRIGGER trg_prv_user_role_update
                AFTER UPDATE
                ON prv_user_role
                FOR EACH ROW
            BEGIN
                CALL proc_jtb_object_privilege_refresh_by_owner(OLD.prv_user);
                CALL proc_jtb_object_privilege_refresh_by_owner(NEW.prv_user);
            END;
        </createProcedure>

        <rollback>
            <sql>
                DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_insert;
                DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_delete;
                DROP TRIGGER IF EXISTS trg_prv_object_hierarchy_update;
                DROP TRIGGER IF EXISTS trg_prv_privilege_insert;
                DROP TRIGGER IF EXISTS trg_prv_privilege_delete;
                DROP TRIGGER IF EXISTS trg_prv_privilege_update;
            </sql>
        </rollback>

    </changeSet>

</databaseChangeLog>
